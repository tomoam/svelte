/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	attr,
	destroy_each,
	detach,
	first_child,
	first_element_child,
	init,
	insert,
	make_renderer,
	next_element_sibling,
	next_sibling,
	noop,
	replace_text,
	safe_not_equal
} from "svelte/internal";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i].id;
	child_ctx[2] = list[i].name;
	child_ctx[4] = i;
	return child_ctx;
}

const render = make_renderer(`<li><a target="_blank"><!>: <!></a></li>`);

// (13:1) {#each cats as { id, name }
function create_each_block(ctx) {
	let li;
	let a;
	let t0_value = /*i*/ ctx[4] + 1 + "";
	let t0;
	let t1;
	let t2_value = /*name*/ ctx[2] + "";
	let t2;
	let a_href_value;

	return {
		c() {
			li = first_child(render());
			a = first_element_child(li);
			t0 = replace_text(first_child(a), t0_value);
			t1 = next_sibling(t0);
			t2 = replace_text(next_sibling(t1), t2_value);
			attr(a, "href", a_href_value = "https://www.youtube.com/watch?v=" + /*id*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

const render_1 = make_renderer(`<h1>The Famous Cats of YouTube</h1> <ul>a <!> b</ul>`);

function create_fragment(ctx) {
	let h1;
	let t1;
	let ul;
	let t2;
	let t3;
	let each_value = /*cats*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			h1 = first_child(render_1());
			t1 = next_sibling(h1);
			ul = next_element_sibling(t1);
			t2 = first_child(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = next_sibling(next_sibling(t2));
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, t3);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*cats*/ 1) {
				each_value = /*cats*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, t3);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self) {
	let cats = [
		{ id: 'J---aiyznGQ', name: 'Keyboard Cat' },
		{ id: 'z_AbfPXTKms', name: 'Maru' },
		{
			id: 'OUtn3pvWmpg',
			name: 'Henri The Existential Cat'
		}
	];

	return [cats];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;