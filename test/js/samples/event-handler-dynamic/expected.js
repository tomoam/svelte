/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	detach,
	init,
	insert,
	is_function,
	listen,
	make_renderer,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	traverse
} from "svelte/internal";

const render = make_renderer(`<p><button>set handler 1</button> <button>set handler 2</button></p> <p> </p> <button>click</button>`);
const node_path = () => [,0,1,-1,-2,-1,0,-7,-1];

function create_fragment(ctx) {
	let render_nodes = [];
	let mounted;
	let dispose;

	return {
		c() {
			traverse(render(), render_nodes, node_path());
			render_nodes[6].data = /*number*/ ctx[1];
		},
		m(target, anchor) {
			insert(target, render_nodes[0], anchor); /* p0 */
			insert(target, render_nodes[4], anchor); /* t3 */
			insert(target, render_nodes[5], anchor); /* p1 */
			insert(target, render_nodes[7], anchor); /* t5 */
			insert(target, render_nodes[8], anchor); /* button2 */

			if (!mounted) {
				dispose = [
					listen(render_nodes[1], "click", /*updateHandler1*/ ctx[2]),
					listen(render_nodes[3], "click", /*updateHandler2*/ ctx[3]),
					listen(render_nodes[8], "click", function () {
						if (is_function(/*clickHandler*/ ctx[0])) /*clickHandler*/ ctx[0].apply(this, arguments);
					})
				];

				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			if (dirty & /*number*/ 2) set_data(render_nodes[6], /*number*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(render_nodes[0]); /* p0 */
			if (detaching) detach(render_nodes[4]); /* t3 */
			if (detaching) detach(render_nodes[5]); /* p1 */
			if (detaching) detach(render_nodes[7]); /* t5 */
			if (detaching) detach(render_nodes[8]); /* button2 */
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let clickHandler;
	let number = 0;

	function updateHandler1() {
		$$invalidate(0, clickHandler = () => $$invalidate(1, number = 1));
	}

	function updateHandler2() {
		$$invalidate(0, clickHandler = () => $$invalidate(1, number = 2));
	}

	return [clickHandler, number, updateHandler1, updateHandler2];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;