/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	detach,
	init,
	insert,
	listen,
	make_renderer,
	noop,
	safe_not_equal,
	set_data,
	subscribe
} from "svelte/internal";

import { writable } from 'svelte/store';
const render = make_renderer(`<h1> </h1> <button>reset</button>`);

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			h1 = render().firstChild;
			t0 = h1.firstChild;
			t0.data = /*$foo*/ ctx[1];
			t1 = h1.nextSibling;
			button = t1.nextSibling;
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$foo*/ 2) set_data(t0, /*$foo*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $foo,
		$$unsubscribe_foo = noop,
		$$subscribe_foo = () => ($$unsubscribe_foo(), $$unsubscribe_foo = subscribe(foo, $$value => $$invalidate(1, $foo = $$value)), foo);

	$$self.$$.on_destroy.push(() => $$unsubscribe_foo());
	let foo = writable(0);
	$$subscribe_foo();
	const click_handler = () => $$subscribe_foo($$invalidate(0, foo = writable(0)));
	return [foo, $foo, click_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;