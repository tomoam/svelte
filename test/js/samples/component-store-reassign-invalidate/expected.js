/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	detach,
	init,
	insert,
	listen,
	make_renderer,
	noop,
	safe_not_equal,
	set_data,
	subscribe,
	traverse
} from "svelte/internal";

import { writable } from 'svelte/store';
const render = make_renderer(`<h1> </h1> <button>reset</button>`);
const node_path = () => [,0,-2,-1];

function create_fragment(ctx) {
	let render_nodes = [];
	let mounted;
	let dispose;

	return {
		c() {
			traverse(render(), render_nodes, node_path());
			render_nodes[1].data = /*$foo*/ ctx[1];
		},
		m(target, anchor) {
			insert(target, render_nodes[0], anchor); /* h1 */
			insert(target, render_nodes[2], anchor); /* t1 */
			insert(target, render_nodes[3], anchor); /* button */

			if (!mounted) {
				dispose = listen(render_nodes[3], "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$foo*/ 2) set_data(render_nodes[1], /*$foo*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(render_nodes[0]); /* h1 */
			if (detaching) detach(render_nodes[2]); /* t1 */
			if (detaching) detach(render_nodes[3]); /* button */
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $foo,
		$$unsubscribe_foo = noop,
		$$subscribe_foo = () => ($$unsubscribe_foo(), $$unsubscribe_foo = subscribe(foo, $$value => $$invalidate(1, $foo = $$value)), foo);

	$$self.$$.on_destroy.push(() => $$unsubscribe_foo());
	let foo = writable(0);
	$$subscribe_foo();
	const click_handler = () => $$subscribe_foo($$invalidate(0, foo = writable(0)));
	return [foo, $foo, click_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;