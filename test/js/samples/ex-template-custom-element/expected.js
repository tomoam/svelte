/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	assign,
	compute_rest_props,
	detach,
	exclude_internal_props,
	first_child,
	init,
	insert_experimental,
	make_renderer,
	next_element_sibling,
	next_sibling,
	noop,
	replace_text,
	safe_not_equal,
	set_data
} from "svelte/internal";

const render = make_renderer(`<p>name: <!></p> <p>$$props: <!></p> <p>$$restProps: <!></p>`);

function create_fragment(ctx) {
	let p0;
	let t0;
	let t1;
	let t2;
	let p1;
	let t3;
	let t4_value = JSON.stringify(/*$$props*/ ctx[1]) + "";
	let t4;
	let t5;
	let p2;
	let t6;
	let t7_value = JSON.stringify(/*$$restProps*/ ctx[2]) + "";
	let t7;

	return {
		c() {
			p0 = first_child(render());
			t0 = first_child(p0);
			t1 = replace_text(next_sibling(t0), /*name*/ ctx[0]);
			t2 = next_sibling(p0);
			p1 = next_element_sibling(t2);
			t3 = first_child(p1);
			t4 = replace_text(next_sibling(t3), t4_value);
			t5 = next_sibling(p1);
			p2 = next_element_sibling(t5);
			t6 = first_child(p2);
			t7 = replace_text(next_sibling(t6), t7_value);
		},
		m(target, anchor) {
			insert_experimental(target, p0, anchor);
			insert_experimental(target, t2, anchor);
			insert_experimental(target, p1, anchor);
			insert_experimental(target, t5, anchor);
			insert_experimental(target, p2, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data(t1, /*name*/ ctx[0]);
			if (dirty & /*$$props*/ 2 && t4_value !== (t4_value = JSON.stringify(/*$$props*/ ctx[1]) + "")) set_data(t4, t4_value);
			if (dirty & /*$$restProps*/ 4 && t7_value !== (t7_value = JSON.stringify(/*$$restProps*/ ctx[2]) + "")) set_data(t7, t7_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(p0);
			if (detaching) detach(t2);
			if (detaching) detach(p1);
			if (detaching) detach(t5);
			if (detaching) detach(p2);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["name"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { name } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('name' in $$new_props) $$invalidate(0, name = $$new_props.name);
	};

	$$props = exclude_internal_props($$props);
	return [name, $$props, $$restProps];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { name: 0 });
	}
}

export default Component;