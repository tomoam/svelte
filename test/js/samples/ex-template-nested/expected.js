/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	create_component,
	destroy_component,
	detach,
	first_child,
	first_element_child,
	init,
	insert_experimental,
	make_renderer,
	mount_component,
	next_element_sibling,
	next_sibling,
	noop,
	replace_blank,
	safe_not_equal,
	transition_in,
	transition_out
} from "svelte/internal";

import Nested from './Nested.svelte';
const render = make_renderer(`<div><span>before</span> <!> <div>after</div></div>`);

function create_fragment(ctx) {
	let div1;
	let span;
	let t1;
	let nested;
	let nested_anchor;
	let t2;
	let div0;
	let current;
	nested = new Nested({});

	return {
		c() {
			div1 = first_child(render());
			span = first_element_child(div1);
			t1 = next_sibling(span);
			create_component(nested.$$.fragment);
			nested_anchor = replace_blank(next_sibling(t1));
			t2 = next_sibling(nested_anchor);
			div0 = next_element_sibling(t2);
		},
		m(target, anchor) {
			insert_experimental(target, div1, anchor);
			mount_component(nested, div1, t2);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(nested.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(nested.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(nested);
		}
	};
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Component;