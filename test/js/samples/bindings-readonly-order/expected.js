/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	detach,
	first_child,
	init,
	insert_experimental,
	listen,
	make_renderer,
	next_element_sibling,
	next_sibling,
	noop,
	run_all,
	safe_not_equal
} from "svelte/internal";

const render = make_renderer(`<input type="file"> <input type="file">`);

function create_fragment(ctx) {
	let input0;
	let t;
	let input1;
	let mounted;
	let dispose;

	return {
		c() {
			input0 = first_child(render());
			t = next_sibling(input0);
			input1 = next_element_sibling(t);
		},
		m(target, anchor) {
			insert_experimental(target, input0, anchor);
			insert_experimental(target, t, anchor);
			insert_experimental(target, input1, anchor);

			if (!mounted) {
				dispose = [
					listen(input0, "change", /*input0_change_handler*/ ctx[1]),
					listen(input1, "change", /*input1_change_handler*/ ctx[2])
				];

				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input0);
			if (detaching) detach(t);
			if (detaching) detach(input1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { files } = $$props;

	function input0_change_handler() {
		files = this.files;
		$$invalidate(0, files);
	}

	function input1_change_handler() {
		files = this.files;
		$$invalidate(0, files);
	}

	$$self.$$set = $$props => {
		if ('files' in $$props) $$invalidate(0, files = $$props.files);
	};

	return [files, input0_change_handler, input1_change_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { files: 0 });
	}
}

export default Component;