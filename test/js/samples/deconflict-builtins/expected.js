/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	comment,
	destroy_each,
	detach,
	init,
	insert,
	make_renderer,
	noop,
	safe_not_equal,
	traverse
} from "svelte/internal";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

const render = make_renderer(`<span> </span>`);
const node_path = () => [,0];

// (5:0) {#each createElement as node}
function create_each_block(ctx) {
	let render_nodes = [];
	let t_value = /*node*/ ctx[1] + "";

	return {
		c() {
			traverse(render(), render_nodes, node_path());
			render_nodes[1].data = t_value;
		},
		m(target, anchor) {
			insert(target, render_nodes[0], anchor); /* span */
		},
		p(ctx, dirty) {
			if (dirty & /*createElement*/ 1 && t_value !== (t_value = /*node*/ ctx[1] + "")) render_nodes[1].data = t_value;
		},
		d(detaching) {
			if (detaching) detach(render_nodes[0]); /* span */
		}
	};
}

function create_fragment(ctx) {
	let each_1_anchor = comment();
	let each_value = /*createElement*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		m(target, anchor) {
			insert(target, each_1_anchor, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, each_1_anchor);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*createElement*/ 1) {
				each_value = /*createElement*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(each_1_anchor);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { createElement } = $$props;

	$$self.$$set = $$props => {
		if ('createElement' in $$props) $$invalidate(0, createElement = $$props.createElement);
	};

	return [createElement];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { createElement: 0 });
	}
}

export default Component;