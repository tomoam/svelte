/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	detach,
	first_child,
	first_element_child,
	init,
	insert,
	listen,
	make_renderer,
	next_element_sibling,
	next_sibling,
	noop,
	replace_text,
	safe_not_equal,
	set_data,
	set_input_value
} from "svelte/internal";

const render = make_renderer(`<section><div class="test"><input> <h1>Hello <!>!</h1> <p><!></p></div></section>`);

function create_fragment(ctx) {
	let section;
	let div;
	let input;
	let h1;
	let t1;
	let t2;
	let p;
	let t5;
	let mounted;
	let dispose;

	return {
		c() {
			section = first_child(render());
			div = first_element_child(section);
			input = first_element_child(div);
			h1 = next_element_sibling(input);
			t1 = first_child(h1);
			t2 = replace_text(next_sibling(t1), /*name*/ ctx[0]);
			p = next_element_sibling(h1);
			t5 = replace_text(first_child(p), description);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			set_input_value(input, /*name*/ ctx[0]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1 && input.value !== /*name*/ ctx[0]) {
				set_input_value(input, /*name*/ ctx[0]);
			}

			if (dirty & /*name*/ 1) set_data(t2, /*name*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			mounted = false;
			dispose();
		}
	};
}

let description = "see below";

function instance($$self, $$props, $$invalidate) {
	let name = "world";

	function input_input_handler() {
		name = this.value;
		$$invalidate(0, name);
	}

	return [name, input_input_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;