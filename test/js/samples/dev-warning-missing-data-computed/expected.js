/* generated by Svelte vX.Y.Z */
import {
	SvelteComponentDev,
	add_location,
	detach_dev,
	dispatch_dev,
	init,
	insert_dev,
	make_renderer,
	noop,
	replace_text,
	safe_not_equal,
	set_data_dev,
	traverse,
	validate_slots
} from "svelte/internal";

const file = undefined;
const render = make_renderer(`<p><!> <!></p>`);
const node_path = () => [,0,-1,1];

function create_fragment(ctx) {
	let render_nodes = [];
	let t0_value = Math.max(0, /*foo*/ ctx[0]) + "";

	const block = {
		c: function create() {
			traverse(render(), render_nodes, node_path());
			render_nodes[1] = replace_text(render_nodes[1], t0_value);
			render_nodes[3] = replace_text(render_nodes[3], /*bar*/ ctx[1]);
			add_location(render_nodes[0], file, 7, 0, 67);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, render_nodes[0], anchor); /* p */
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*foo*/ 1 && t0_value !== (t0_value = Math.max(0, /*foo*/ ctx[0]) + "")) set_data_dev(render_nodes[1], t0_value);
			if (dirty & /*bar*/ 2) set_data_dev(render_nodes[3], /*bar*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(render_nodes[0]); /* p */
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Component', slots, []);
	let { foo } = $$props;
	let bar;
	const writable_props = ['foo'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Component> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('foo' in $$props) $$invalidate(0, foo = $$props.foo);
	};

	$$self.$capture_state = () => ({ foo, bar });

	$$self.$inject_state = $$props => {
		if ('foo' in $$props) $$invalidate(0, foo = $$props.foo);
		if ('bar' in $$props) $$invalidate(1, bar = $$props.bar);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*foo*/ 1) {
			$: $$invalidate(1, bar = foo * 2);
		}
	};

	return [foo, bar];
}

class Component extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { foo: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Component",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*foo*/ ctx[0] === undefined && !('foo' in props)) {
			console.warn("<Component> was created without expected prop 'foo'");
		}
	}

	get foo() {
		throw new Error("<Component>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set foo(value) {
		throw new Error("<Component>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Component;