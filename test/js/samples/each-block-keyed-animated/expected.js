/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	create_animation,
	detach,
	fix_and_destroy_block,
	fix_position,
	init,
	insert,
	make_renderer,
	noop,
	safe_not_equal,
	set_data,
	traverse,
	update_keyed_each
} from "svelte/internal";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

const render = make_renderer(`<div> </div>`);
const node_path = () => [0,0];

// (19:0) {#each things as thing (thing.id)}
function create_each_block(key_1, ctx) {
	let render_nodes = [];
	let t_value = /*thing*/ ctx[1].name + "";
	let rect;
	let stop_animation = noop;

	return {
		key: key_1,
		first: null,
		c() {
			traverse(render(), render_nodes, node_path());
			render_nodes[1].data = t_value;
			this.first = render_nodes[0];
		},
		m(target, anchor) {
			insert(target, render_nodes[0], anchor); /* div */
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*things*/ 1 && t_value !== (t_value = /*thing*/ ctx[1].name + "")) set_data(render_nodes[1], t_value);
		},
		r() {
			rect = render_nodes[0].getBoundingClientRect();
		},
		f() {
			fix_position(render_nodes[0]);
			stop_animation();
		},
		a() {
			stop_animation();
			stop_animation = create_animation(render_nodes[0], rect, foo, {});
		},
		d(detaching) {
			if (detaching) detach(render_nodes[0]); /* div */
		}
	};
}

const render_1 = make_renderer(`<!>`);

function create_fragment(ctx) {
	let render_nodes = [];
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_value = /*things*/ ctx[0];
	const get_key = ctx => /*thing*/ ctx[1].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			traverse(render_1(), render_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		m(target, anchor) {
			insert(target, render_nodes[0], anchor); /* each_1 */
			each_blocks.forEach(block => block.m(target, render_nodes[0]));
		},
		p(ctx, [dirty]) {
			if (dirty & /*things*/ 1) {
				each_value = /*things*/ ctx[0];
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, render_nodes[0].parentNode, fix_and_destroy_block, create_each_block, render_nodes[0], get_each_context);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(render_nodes[0]); /* each_1 */
			each_blocks.forEach(block => block.d(detaching));
		}
	};
}

function foo(node, animation, params) {
	const dx = animation.from.left - animation.to.left;
	const dy = animation.from.top - animation.to.top;

	return {
		delay: params.delay,
		duration: 100,
		tick: (t, u) => {
			node.dx = u * dx;
			node.dy = u * dy;
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { things } = $$props;

	$$self.$$set = $$props => {
		if ('things' in $$props) $$invalidate(0, things = $$props.things);
	};

	return [things];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { things: 0 });
	}
}

export default Component;