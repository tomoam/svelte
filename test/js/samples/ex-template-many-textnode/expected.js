/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	children,
	claim_template_element,
	claim_template_text,
	detach,
	first_child,
	first_element_child,
	init,
	insert_hydration,
	listen,
	make_renderer,
	next_element_sibling,
	next_sibling,
	noop,
	replace_text,
	safe_not_equal,
	set_data,
	set_input_value,
	trim_nodes
} from "svelte/internal";

const render = make_renderer(`textnode1 textnode2 <section>textnode3 textnode4 <div class="test">textnode5 textnode6 <input> textnode7 textnode8 <h1>Hello <!>!</h1> textnode9 textnode10 <p><!></p> textnode11 textnode12</div> textnode13 textnode14</section> textnode15 textnode16 <div>textnode17</div>`);

function create_fragment(ctx) {
	let t0;
	let section;
	let div0;
	let input;
	let h1;
	let t4;
	let t5;
	let t6;
	let p;
	let t8;
	let t11;
	let div1;
	let mounted;
	let dispose;
	let cloned;

	return {
		c() {
			t0 = first_child(render());
			section = next_sibling(t0);
			div0 = first_element_child(section);
			input = first_element_child(div0);
			h1 = next_element_sibling(input);
			t4 = first_child(h1);
			t5 = replace_text(next_sibling(t4), /*name*/ ctx[0]);
			t6 = next_sibling(t5);
			p = next_element_sibling(h1);
			t8 = replace_text(first_child(p), description);
			t11 = next_sibling(section);
			div1 = next_sibling(t11);
			cloned = true;
		},
		l(nodes) {
			if (!cloned) this.c();
			if (nodes.length === 0) return;
			t0 = claim_template_text(t0, nodes[0], nodes);
			section = claim_template_element(section, next_sibling(t0), nodes);
			var section_nodes = children(section);
			if (!section.ic) div0 = claim_template_element(div0, first_element_child(section), section_nodes, section);
			var div0_nodes = children(div0);
			if (!div0.ic) input = claim_template_element(input, first_element_child(div0), div0_nodes, div0);
			if (!div0.ic) h1 = claim_template_element(h1, next_element_sibling(input), div0_nodes, div0);
			var h1_nodes = children(h1);
			if (!h1.ic) t4 = claim_template_text(t4, first_child(h1), h1_nodes, h1);
			if (!h1.ic) t5 = claim_template_text(t5, next_sibling(t4), h1_nodes, h1);
			if (!h1.ic) t6 = claim_template_text(t6, next_sibling(t5), h1_nodes, h1);
			if (!div0.ic) p = claim_template_element(p, next_element_sibling(h1), div0_nodes, div0);
			if (!p.ic) t8 = claim_template_text(t8, first_child(p), trim_nodes(children(p)), p);
			t11 = claim_template_text(t11, next_sibling(section), nodes);
			div1 = claim_template_element(div1, next_sibling(t11), nodes);
		},
		m(target, anchor) {
			insert_hydration(target, t0, anchor);
			insert_hydration(target, section, anchor);
			set_input_value(input, /*name*/ ctx[0]);
			insert_hydration(target, t11, anchor);
			insert_hydration(target, div1, anchor);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1 && input.value !== /*name*/ ctx[0]) {
				set_input_value(input, /*name*/ ctx[0]);
			}

			if (dirty & /*name*/ 1) set_data(t5, /*name*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(section);
			if (detaching) detach(t11);
			if (detaching) detach(div1);
			mounted = false;
			dispose();
		}
	};
}

let description = "see below";

function instance($$self, $$props, $$invalidate) {
	let name = "world";

	function input_input_handler() {
		name = this.value;
		$$invalidate(0, name);
	}

	return [name, input_input_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;