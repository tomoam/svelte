/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	children,
	claim_element_experimental,
	claim_text_experimental,
	detach,
	first_child,
	first_element_child,
	init,
	insert_experimental_hydration,
	listen,
	make_renderer,
	next_element_sibling,
	next_sibling,
	noop,
	replace_text,
	safe_not_equal,
	set_data,
	set_input_value,
	trim_nodes
} from "svelte/internal";

const render = make_renderer(`textnode1 textnode2 <section>textnode3 textnode4 <div class="test">textnode5 textnode6 <input> textnode7 textnode8 <h1>Hello <!>!</h1> textnode9 textnode10 <p><!></p> textnode11 textnode12</div> textnode13 textnode14</section> textnode15 textnode16 <div>textnode17</div>`);

function create_fragment(ctx) {
	let t0;
	let section;
	let div0;
	let input;
	let h1;
	let t4;
	let t5;
	let t6;
	let p;
	let t8;
	let t11;
	let div1;
	let mounted;
	let dispose;

	return {
		c() {
			t0 = first_child(render());
			section = next_element_sibling(t0);
			div0 = first_element_child(section);
			input = first_element_child(div0);
			h1 = next_element_sibling(input);
			t4 = first_child(h1);
			t5 = replace_text(next_sibling(t4), /*name*/ ctx[0]);
			t6 = next_sibling(t5);
			p = next_element_sibling(h1);
			t8 = replace_text(first_child(p), description);
			t11 = next_sibling(section);
			div1 = next_element_sibling(t11);
		},
		l(nodes) {
			this.c();
			if (!nodes.length) return;
			t0 = claim_text_experimental(t0, nodes);
			section = claim_element_experimental(section, nodes);
			var section_nodes = children(section);
			div0 = claim_element_experimental(div0, section_nodes, section);
			var div0_nodes = children(div0);
			input = claim_element_experimental(input, div0_nodes, div0);
			h1 = claim_element_experimental(h1, div0_nodes, div0);
			var h1_nodes = children(h1);
			t4 = claim_text_experimental(t4, h1_nodes, h1);
			t5 = claim_text_experimental(t5, h1_nodes, h1);
			t6 = claim_text_experimental(t6, h1_nodes, h1);
			p = claim_element_experimental(p, div0_nodes, div0);
			t8 = claim_text_experimental(t8, trim_nodes(children(p)), p);
			t11 = claim_text_experimental(t11, nodes);
			div1 = claim_element_experimental(div1, nodes);
		},
		m(target, anchor) {
			insert_experimental_hydration(target, t0, anchor);
			insert_experimental_hydration(target, section, anchor);
			set_input_value(input, /*name*/ ctx[0]);
			insert_experimental_hydration(target, t11, anchor);
			insert_experimental_hydration(target, div1, anchor);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1 && input.value !== /*name*/ ctx[0]) {
				set_input_value(input, /*name*/ ctx[0]);
			}

			if (dirty & /*name*/ 1) set_data(t5, /*name*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(section);
			if (detaching) detach(t11);
			if (detaching) detach(div1);
			mounted = false;
			dispose();
		}
	};
}

let description = "see below";

function instance($$self, $$props, $$invalidate) {
	let name = "world";

	function input_input_handler() {
		name = this.value;
		$$invalidate(0, name);
	}

	return [name, input_input_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;