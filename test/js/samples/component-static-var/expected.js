/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	create_component,
	destroy_component,
	detach_all,
	init,
	insert_all,
	listen,
	make_renderer,
	mount_component,
	safe_not_equal,
	set_input_value,
	transition_in,
	transition_out,
	traverse
} from "svelte/internal";

import Foo from './Foo.svelte';
import Bar from './Bar.svelte';
const render = make_renderer(`<!> <!> <input>`);
const node_path = () => [0,1,1,1,1];

function create_fragment(ctx) {
	let render_nodes = [];
	let foo;
	let bar;
	let current;
	let mounted;
	let dispose;
	foo = new Foo({ props: { x: y } });
	bar = new Bar({ props: { x: /*z*/ ctx[0] } });

	return {
		c() {
			traverse(render(), render_nodes, node_path());
			create_component(foo.$$.fragment);
			create_component(bar.$$.fragment);
		},
		m(target, anchor) {
			insert_all(target, render_nodes, [0,1,2,3,4], anchor);
			mount_component(foo, target, render_nodes[0]);
			mount_component(bar, target, render_nodes[2]);
			set_input_value(render_nodes[4], /*z*/ ctx[0]);
			current = true;

			if (!mounted) {
				dispose = listen(render_nodes[4], "input", /*input_input_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const bar_changes = {};
			if (dirty & /*z*/ 1) bar_changes.x = /*z*/ ctx[0];
			bar.$set(bar_changes);

			if (dirty & /*z*/ 1 && render_nodes[4].value !== /*z*/ ctx[0]) {
				set_input_value(render_nodes[4], /*z*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(foo.$$.fragment, local);
			transition_in(bar.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(foo.$$.fragment, local);
			transition_out(bar.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			detach_all(detaching, render_nodes, [0,1,2,3,4]);
			destroy_component(foo, detaching);
			destroy_component(bar, detaching);
			mounted = false;
			dispose();
		}
	};
}

let y = 1;

function instance($$self, $$props, $$invalidate) {
	let z = 2;

	function input_input_handler() {
		z = this.value;
		$$invalidate(0, z);
	}

	return [z, input_input_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;