/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	detach,
	init,
	insert,
	make_renderer,
	noop,
	safe_not_equal,
	set_data,
	traverse
} from "svelte/internal";

import { onMount } from 'svelte';
const render = make_renderer(`<p> </p>`);
const node_path = () => [,0];

function create_fragment(ctx) {
	let render_nodes = [];

	return {
		c() {
			traverse(render(), render_nodes, node_path());
			render_nodes[1].data = /*y*/ ctx[0];
		},
		m(target, anchor) {
			insert(target, render_nodes[0], anchor); /* p */
		},
		p(ctx, [dirty]) {
			if (dirty & /*y*/ 1) set_data(render_nodes[1], /*y*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(render_nodes[0]); /* p */
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let x;
	let y;
	let a = 1, b = 2, c = 3;

	onMount(() => {
		const interval = setInterval(
			() => {
				$$invalidate(1, b += 1);
				c += 1;
				console.log(b, c);
			},
			1000
		);

		return () => clearInterval(interval);
	});

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*b*/ 2) {
			$: $$invalidate(0, y = b * 2);
		}
	};

	$: x = a * 2;
	return [y, b];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;