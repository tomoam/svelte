/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	detach,
	first_child,
	init,
	insert,
	listen,
	make_renderer,
	next_sibling,
	noop,
	replace_text,
	safe_not_equal,
	set_data
} from "svelte/internal";

const render = make_renderer(`<input> <h1><!>!</h1>`);

function create_fragment(ctx) {
	let input;
	let t0;
	let h1;
	let t1;
	let mounted;
	let dispose;

	return {
		c() {
			input = first_child(render());
			t0 = next_sibling(input);
			h1 = next_sibling(t0);
			t1 = replace_text(first_child(h1), /*name*/ ctx[0]);
			input.value = /*name*/ ctx[0];
		},
		m(target, anchor) {
			insert(target, input, anchor);
			insert(target, t0, anchor);
			insert(target, h1, anchor);

			if (!mounted) {
				dispose = listen(input, "input", /*onInput*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1 && input.value !== /*name*/ ctx[0]) {
				input.value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) set_data(t1, /*name*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input);
			if (detaching) detach(t0);
			if (detaching) detach(h1);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let name = 'change me';

	function onInput(event) {
		$$invalidate(0, name = event.target.value);
	}

	return [name, onInput];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;