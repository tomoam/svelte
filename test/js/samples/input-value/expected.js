/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	attr,
	detach_all,
	init,
	insert_all,
	listen,
	make_renderer,
	noop,
	replace_text,
	run_all,
	safe_not_equal,
	set_data,
	traverse
} from "svelte/internal";

const render = make_renderer(`<input> <input type="email"> <input type="month"> <input type="number"> <input type="password"> <input type="search"> <input type="tel"> <input type="text"> <input type="url"> <input type="week"> <input type="button"> <input type="checkbox"> <input type="color"> <input type="date"> <input type="datetime-local"> <input type="file"> <input type="hidden"> <input type="image"> <input type="radio"> <input type="range"> <input type="reset"> <input type="submit"> <input type="time"> <h1><!>!</h1>`);

const node_path = () => [
	,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,-1
];

function create_fragment(ctx) {
	let render_nodes = [];
	let mounted;
	let dispose;

	return {
		c() {
			traverse(render(), render_nodes, node_path());
			render_nodes[47] = replace_text(render_nodes[47], /*name*/ ctx[0]);
			render_nodes[0].value = /*name*/ ctx[0];
			render_nodes[2].value = /*name*/ ctx[0];
			render_nodes[4].value = /*name*/ ctx[0];
			render_nodes[6].value = /*name*/ ctx[0];
			render_nodes[8].value = /*name*/ ctx[0];
			render_nodes[10].value = /*name*/ ctx[0];
			render_nodes[12].value = /*name*/ ctx[0];
			render_nodes[14].value = /*name*/ ctx[0];
			render_nodes[16].value = /*name*/ ctx[0];
			render_nodes[18].value = /*name*/ ctx[0];
			render_nodes[20].value = /*name*/ ctx[0];
			render_nodes[22].value = /*name*/ ctx[0];
			render_nodes[24].value = /*name*/ ctx[0];
			render_nodes[26].value = /*name*/ ctx[0];
			render_nodes[28].value = /*name*/ ctx[0];
			render_nodes[30].value = /*name*/ ctx[0];
			render_nodes[32].value = /*name*/ ctx[0];
			render_nodes[34].value = /*name*/ ctx[0];
			attr(render_nodes[34], "alt", /*name*/ ctx[0]);
			render_nodes[36].value = /*name*/ ctx[0];
			render_nodes[38].value = /*name*/ ctx[0];
			render_nodes[40].value = /*name*/ ctx[0];
			render_nodes[42].value = /*name*/ ctx[0];
			render_nodes[44].value = /*name*/ ctx[0];
		},
		m(target, anchor) {
			insert_all(
				target,
				render_nodes,
				[
					0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
				],
				anchor
			);

			if (!mounted) {
				dispose = [
					listen(render_nodes[0], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[2], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[4], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[6], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[8], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[10], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[12], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[14], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[16], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[18], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[20], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[22], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[24], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[26], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[28], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[30], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[32], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[34], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[36], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[38], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[40], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[42], "input", /*onInput*/ ctx[1]),
					listen(render_nodes[44], "input", /*onInput*/ ctx[1])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1 && render_nodes[0].value !== /*name*/ ctx[0]) {
				render_nodes[0].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1 && render_nodes[2].value !== /*name*/ ctx[0]) {
				render_nodes[2].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1 && render_nodes[4].value !== /*name*/ ctx[0]) {
				render_nodes[4].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1 && render_nodes[6].value !== /*name*/ ctx[0]) {
				render_nodes[6].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1 && render_nodes[8].value !== /*name*/ ctx[0]) {
				render_nodes[8].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1 && render_nodes[10].value !== /*name*/ ctx[0]) {
				render_nodes[10].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1 && render_nodes[12].value !== /*name*/ ctx[0]) {
				render_nodes[12].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1 && render_nodes[14].value !== /*name*/ ctx[0]) {
				render_nodes[14].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1 && render_nodes[16].value !== /*name*/ ctx[0]) {
				render_nodes[16].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1 && render_nodes[18].value !== /*name*/ ctx[0]) {
				render_nodes[18].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) {
				render_nodes[20].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) {
				render_nodes[22].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) {
				render_nodes[24].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) {
				render_nodes[26].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) {
				render_nodes[28].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) {
				render_nodes[30].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) {
				render_nodes[32].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) {
				render_nodes[34].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) {
				attr(render_nodes[34], "alt", /*name*/ ctx[0]);
			}

			if (dirty & /*name*/ 1) {
				render_nodes[36].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) {
				render_nodes[38].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) {
				render_nodes[40].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) {
				render_nodes[42].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1 && render_nodes[44].value !== /*name*/ ctx[0]) {
				render_nodes[44].value = /*name*/ ctx[0];
			}

			if (dirty & /*name*/ 1) set_data(render_nodes[47], /*name*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			detach_all(detaching, render_nodes, [
				0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
			]);

			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let name = 'change me';

	function onInput(event) {
		$$invalidate(0, name = event.target.value);
	}

	return [name, onInput];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;
