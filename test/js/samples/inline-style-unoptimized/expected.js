/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	attr,
	detach,
	first_child,
	init,
	insert_experimental,
	make_renderer,
	next_element_sibling,
	next_sibling,
	noop,
	safe_not_equal
} from "svelte/internal";

const render = make_renderer(`<div></div> <div></div>`);

function create_fragment(ctx) {
	let div0;
	let t;
	let div1;
	let div1_style_value;

	return {
		c() {
			div0 = first_child(render());
			t = next_sibling(div0);
			div1 = next_element_sibling(t);
			attr(div0, "style", /*style*/ ctx[0]);
			attr(div1, "style", div1_style_value = "" + (/*key*/ ctx[1] + ": " + /*value*/ ctx[2]));
		},
		m(target, anchor) {
			insert_experimental(target, div0, anchor);
			insert_experimental(target, t, anchor);
			insert_experimental(target, div1, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*style*/ 1) {
				attr(div0, "style", /*style*/ ctx[0]);
			}

			if (dirty & /*key, value*/ 6 && div1_style_value !== (div1_style_value = "" + (/*key*/ ctx[1] + ": " + /*value*/ ctx[2]))) {
				attr(div1, "style", div1_style_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t);
			if (detaching) detach(div1);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { style } = $$props;
	let { key } = $$props;
	let { value } = $$props;

	$$self.$$set = $$props => {
		if ('style' in $$props) $$invalidate(0, style = $$props.style);
		if ('key' in $$props) $$invalidate(1, key = $$props.key);
		if ('value' in $$props) $$invalidate(2, value = $$props.value);
	};

	return [style, key, value];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { style: 0, key: 1, value: 2 });
	}
}

export default Component;