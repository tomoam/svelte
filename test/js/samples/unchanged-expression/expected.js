/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	detach_all,
	init,
	insert_all,
	make_renderer,
	noop,
	replace_text,
	safe_not_equal,
	set_data,
	traverse
} from "svelte/internal";

const render = make_renderer(`<div><p>Hello world</p> <p>Hello <!></p> <p>Hello <!></p></div> <div><p>Hello <!></p></div>`);
const node_path = () => [,,-1,-1,,1,-5,-1,,1,2,1,,,1];

function create_fragment(ctx) {
	let render_nodes = [];

	return {
		c() {
			traverse(render(), render_nodes, node_path());
			render_nodes[5] = replace_text(render_nodes[5], world1);
			render_nodes[9] = replace_text(render_nodes[9], world2);
			render_nodes[14] = replace_text(render_nodes[14], /*world3*/ ctx[0]);
		},
		m(target, anchor) {
			insert_all(target, render_nodes, [0,10,11], anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*world3*/ 1) set_data(render_nodes[14], /*world3*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			detach_all(detaching, render_nodes, [0,10,11]);
		}
	};
}

let world1 = 'world';
let world2 = 'world';

function instance($$self, $$props, $$invalidate) {
	const world3 = 'world';

	function foo() {
		$$invalidate(0, world3 = 'svelte');
	}

	return [world3];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;