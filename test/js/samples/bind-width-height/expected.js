/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	add_render_callback,
	add_resize_listener,
	detach,
	init,
	insert,
	make_renderer,
	noop,
	safe_not_equal,
	traverse
} from "svelte/internal";

const render = make_renderer(`<div>some content</div>`);

function create_fragment(ctx) {
	let render_nodes = [];
	let div_resize_listener;

	return {
		c() {
			traverse(render(), render_nodes);
			add_render_callback(() => /*div_elementresize_handler*/ ctx[2].call(render_nodes[0]));
		},
		m(target, anchor) {
			insert(target, render_nodes[0], anchor); /* div */
			div_resize_listener = add_resize_listener(render_nodes[0], /*div_elementresize_handler*/ ctx[2].bind(render_nodes[0]));
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(render_nodes[0]); /* div */
			div_resize_listener();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { w } = $$props;
	let { h } = $$props;

	function div_elementresize_handler() {
		w = this.offsetWidth;
		h = this.offsetHeight;
		$$invalidate(0, w);
		$$invalidate(1, h);
	}

	$$self.$$set = $$props => {
		if ('w' in $$props) $$invalidate(0, w = $$props.w);
		if ('h' in $$props) $$invalidate(1, h = $$props.h);
	};

	return [w, h, div_elementresize_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { w: 0, h: 1 });
	}
}

export default Component;