/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	detach,
	init,
	insert,
	listen,
	make_renderer,
	noop,
	prevent_default,
	run_all,
	safe_not_equal,
	stop_propagation,
	traverse
} from "svelte/internal";

const render = make_renderer(`<div><div>touch me</div> <button>click me</button> <button>or me</button> <button>or me!</button></div>`);
const node_path = () => [0,0,2,3,4,5,6,7];

function create_fragment(ctx) {
	let render_nodes = [];
	let mounted;
	let dispose;

	return {
		c() {
			traverse(render(), render_nodes, node_path());
		},
		m(target, anchor) {
			insert(target, render_nodes[0], anchor); /* div1 */

			if (!mounted) {
				dispose = [
					listen(render_nodes[1], "touchstart", handleTouchstart, { passive: false }),
					listen(render_nodes[3], "click", stop_propagation(prevent_default(handleClick))),
					listen(render_nodes[5], "click", handleClick, { once: true, capture: true }),
					listen(render_nodes[7], "click", handleClick, true),
					listen(render_nodes[0], "touchstart", handleTouchstart, { passive: true })
				];

				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(render_nodes[0]); /* div1 */
			mounted = false;
			run_all(dispose);
		}
	};
}

function handleTouchstart() {
	
} // ...

function handleClick() {
	
} // ...

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Component;