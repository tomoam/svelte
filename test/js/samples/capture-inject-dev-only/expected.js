/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	detach,
	first_child,
	init,
	insert_experimental,
	listen,
	make_renderer,
	next_element_sibling,
	next_sibling,
	noop,
	replace_text,
	safe_not_equal,
	set_data,
	set_input_value
} from "svelte/internal";

const render = make_renderer(`<p><!></p> <input>`);

function create_fragment(ctx) {
	let p;
	let t0;
	let t1;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			p = first_child(render());
			t0 = replace_text(first_child(p), /*foo*/ ctx[0]);
			t1 = next_sibling(p);
			input = next_element_sibling(t1);
		},
		m(target, anchor) {
			insert_experimental(target, p, anchor);
			insert_experimental(target, t1, anchor);
			insert_experimental(target, input, anchor);
			set_input_value(input, /*foo*/ ctx[0]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*foo*/ 1) set_data(t0, /*foo*/ ctx[0]);

			if (dirty & /*foo*/ 1 && input.value !== /*foo*/ ctx[0]) {
				set_input_value(input, /*foo*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(p);
			if (detaching) detach(t1);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let foo = "bar";

	function input_input_handler() {
		foo = this.value;
		$$invalidate(0, foo);
	}

	return [foo, input_input_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;