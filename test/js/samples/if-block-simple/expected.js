/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	detach,
	init,
	insert_experimental,
	make_renderer,
	noop,
	safe_not_equal
} from "svelte/internal";

const render = make_renderer(`<p>foo!</p>`);

// (5:0) {#if foo}
function create_if_block(ctx) {
	let p;

	return {
		c() {
			p = render().firstChild;
		},
		m(target, anchor) {
			insert_experimental(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

const render_1 = make_renderer(`<!>`);

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*foo*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if_block_anchor = render_1().firstChild;
			if (if_block) if_block.c();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_experimental(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*foo*/ ctx[0]) {
				if (if_block) {
					
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(if_block_anchor);
			if (if_block) if_block.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { foo } = $$props;

	$$self.$$set = $$props => {
		if ('foo' in $$props) $$invalidate(0, foo = $$props.foo);
	};

	return [foo];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { foo: 0 });
	}
}

export default Component;