/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	add_render_callback,
	detach,
	init,
	insert,
	listen,
	make_renderer,
	noop,
	replace_text,
	safe_not_equal,
	set_data,
	traverse
} from "svelte/internal";

const render = make_renderer(`<p>scrolled to <!></p>`);
const node_path = () => [,,1];

function create_fragment(ctx) {
	let render_nodes = [];
	let scrolling = false;

	let clear_scrolling = () => {
		scrolling = false;
	};

	let scrolling_timeout;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowscroll*/ ctx[1]);

	return {
		c() {
			traverse(render(), render_nodes, node_path());
			render_nodes[2] = replace_text(render_nodes[2], /*y*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, render_nodes[0], anchor); /* p */

			if (!mounted) {
				dispose = listen(window, "scroll", () => {
					scrolling = true;
					clearTimeout(scrolling_timeout);
					scrolling_timeout = setTimeout(clear_scrolling, 100);
					/*onwindowscroll*/ ctx[1]();
				});

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*y*/ 1 && !scrolling) {
				scrolling = true;
				clearTimeout(scrolling_timeout);
				scrollTo(window.pageXOffset, /*y*/ ctx[0]);
				scrolling_timeout = setTimeout(clear_scrolling, 100);
			}

			if (dirty & /*y*/ 1) set_data(render_nodes[2], /*y*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(render_nodes[0]); /* p */
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { y } = $$props;

	function onwindowscroll() {
		$$invalidate(0, y = window.pageYOffset)
	}

	$$self.$$set = $$props => {
		if ('y' in $$props) $$invalidate(0, y = $$props.y);
	};

	return [y, onwindowscroll];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { y: 0 });
	}
}

export default Component;